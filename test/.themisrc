
call themis#option('recursive', 1)

let s:root = getcwd()

function! TestHelper() abort
    let helper = {
        \ 'assert': s:assert(),
    \ }

    function! helper.before_each() abort
        execute 'cd' s:root

        call counteria#messenger#set_func({ msg -> themis#log('[test messenger] ' . msg) })
        call themis#log('')

        filetype on
        syntax enable
    endfunction

    function! helper.after_each() abort
        tabedit
        tabonly!
        silent! %bwipeout!

        filetype off
        syntax off
    endfunction

    function! helper.suite(name) abort
        let suite = themis#suite(a:name)
        let suite.before_each = self.before_each
        let suite.after_each = self.after_each
        return suite
    endfunction

    function! helper.sync_execute(...) abort
        let job = call('counteria#main', a:000)
        call job.wait()
    endfunction

    function! helper.sync_read(path) abort
        execute 'edit' a:path
        let job = counteria#last_job()
        call job.wait()
    endfunction

    function! helper.sync_write() abort
        write
        let job = counteria#last_job()
        call job.wait()
    endfunction

    function! helper.search(pattern) abort
        let result = search(a:pattern)
        if result == 0
            let message = printf('%s not found', a:pattern)
            call self.assert.fail(message)
        endif
        return result
    endfunction

    function! helper.buffer_log() abort
        call themis#log('')
        let lines = getbufline('%', 1, '$')
        for line in lines
            call themis#log('[buffer] ' . line)
        endfor
    endfunction

    function! helper.message_log() abort
        call themis#log(execute('messages'))
    endfunction

    function! helper.replace_line(new_line) abort
        call setline('.', a:new_line)
    endfunction

    return helper
endfunction

function! s:assert() abort
    let assert = themis#helper('assert')

    function! assert.filetype(bufnr, expected) abort
        let actual = getbufvar(a:bufnr, '&filetype')
        let message = printf('buffer &filetype should be %s, but actual: %s', a:expected, actual)
        call self.equals(a:expected, actual, message)
    endfunction

    function! assert.tab_count(expected) abort
        let actual = tabpagenr('$')
        let message = printf('tab count should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.match_path(expected) abort
        let expected = '\v^' . a:expected . '$'
        let actual = expand('%:p')
        let message = printf('file path should match %s, but actual: %s', a:expected, actual)
        call self.match(actual, expected, message)
    endfunction

    function! assert.not_found(pattern) abort
        let result = search(a:pattern, 'nw')
        let message = printf('"%s" should not be found, but found at line: %s', a:pattern, result)
        call self.false(result, message)
    endfunction

    function! assert.line_count(expected) abort
        let actual = line('$')
        let message = printf('line count should be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    return assert
endfunction
